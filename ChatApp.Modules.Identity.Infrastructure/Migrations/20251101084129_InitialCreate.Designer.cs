// <auto-generated />
using System;
using ChatApp.Modules.Identity.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatApp.Modules.Identity.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20251101084129_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("module");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id");

                    b.HasIndex("Module");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(729),
                            Description = "Create users",
                            Module = "Identity",
                            Name = "Users.Create",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(864)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1332),
                            Description = "Read users",
                            Module = "Identity",
                            Name = "Users.Read",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1332)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1336),
                            Description = "Update users",
                            Module = "Identity",
                            Name = "Users.Update",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1336)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1338),
                            Description = "Delete users",
                            Module = "Identity",
                            Name = "Users.Delete",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1339)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111115"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1340),
                            Description = "Create roles",
                            Module = "Identity",
                            Name = "Roles.Create",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1341)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111116"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1342),
                            Description = "Read roles",
                            Module = "Identity",
                            Name = "Roles.Read",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1343)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111117"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1344),
                            Description = "Update roles",
                            Module = "Identity",
                            Name = "Roles.Update",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1345)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111118"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1347),
                            Description = "Delete roles",
                            Module = "Identity",
                            Name = "Roles.Delete",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1347)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111119"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1352),
                            Description = "Send messages",
                            Module = "Messaging",
                            Name = "Messages.Send",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1352)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-11111111111a"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1354),
                            Description = "Read messages",
                            Module = "Messaging",
                            Name = "Messages.Read",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1354)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-11111111111b"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1356),
                            Description = "Edit messages",
                            Module = "Messaging",
                            Name = "Messages.Edit",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1356)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-11111111111c"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1358),
                            Description = "Delete messages",
                            Module = "Messaging",
                            Name = "Messages.Delete",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1358)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-11111111111d"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1360),
                            Description = "Upload files",
                            Module = "Files",
                            Name = "Files.Upload",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1360)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-11111111111e"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1362),
                            Description = "Download files",
                            Module = "Files",
                            Name = "Files.Download",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1362)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-11111111111f"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1364),
                            Description = "Delete files",
                            Module = "Files",
                            Name = "Files.Delete",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1364)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111120"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1365),
                            Description = "Create groups",
                            Module = "Messaging",
                            Name = "Groups.Create",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1366)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111121"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1369),
                            Description = "Manage groups",
                            Module = "Messaging",
                            Name = "Groups.Manage",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(1369)
                        });
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at_utc");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("id")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_role");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestampt with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222221"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(5782),
                            Description = "Basic user role",
                            IsSystemRole = true,
                            Name = "User",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(5783)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(6138),
                            Description = "Operator role with extended permissions",
                            IsSystemRole = true,
                            Name = "Operator",
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(6139)
                        });
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("id")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ad6ac5a-7772-4a77-8667-464e13f11f80"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(6805),
                            PermissionId = new Guid("11111111-1111-1111-1111-111111111119"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222221"),
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(6806)
                        },
                        new
                        {
                            Id = new Guid("ae398ecf-82cd-48ef-82a3-535506c96142"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(7067),
                            PermissionId = new Guid("11111111-1111-1111-1111-11111111111a"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222221"),
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(7068)
                        },
                        new
                        {
                            Id = new Guid("463ce3b7-0c45-4ed5-853d-f9eb64f12efa"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(7070),
                            PermissionId = new Guid("11111111-1111-1111-1111-11111111111d"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222221"),
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(7070)
                        },
                        new
                        {
                            Id = new Guid("104a375d-1b29-465d-95db-75e4eaa7995c"),
                            CreatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(7078),
                            PermissionId = new Guid("11111111-1111-1111-1111-11111111111e"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222221"),
                            UpdatedAtUtc = new DateTime(2025, 11, 1, 8, 41, 28, 817, DateTimeKind.Utc).AddTicks(7078)
                        });
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_display_name");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at_utc");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("id")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("id")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("ChatApp.Modules.Identity.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ChatApp.Modules.Identity.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatApp.Modules.Identity.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ChatApp.Modules.Identity.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatApp.Modules.Identity.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ChatApp.Modules.Identity.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
